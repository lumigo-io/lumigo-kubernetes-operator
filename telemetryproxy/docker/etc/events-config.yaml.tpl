{{- $namespaces := (datasource "namespaces") -}}
{{- $config := (datasource "config") -}}
{{- $debug := $config.debug | conv.ToBool -}}
{{- $clusterName := getenv "KUBERNETES_CLUSTER_NAME" "" }}
{{- $otelcolInternalMetricsFrequency := getenv "LUMIGO_OTELCOL_METRICS_SCRAPING_FREQUENCY" "15s" }}
{{- $watchdogEnabled := getenv "LUMIGO_WATCHDOG_ENABLED" "" | conv.ToBool }}
{{- $infraMetricsToken := getenv "LUMIGO_INFRA_METRICS_TOKEN" "" }}

{{- if eq (len $namespaces) 0 }}
# This entire section is meant to prevent an empty config file situation,
# when there are no namespaces monitored yet - as this will fail the collector to start.
receivers:
  otlp:
    protocols:
      http:

exporters:
  debug:

service:
  pipelines:
    logs:
      receivers: [otlp]
      processors: []
      exporters: [debug]
{{- else }}

receivers:

  prometheus/collector-self-metrics:
    config:
      scrape_configs:
        - job_name: 'lumigo-operator-self-metrics'
          scrape_interval: {{ $otelcolInternalMetricsFrequency }}
          static_configs:
            - targets: ['0.0.0.0:8888']

{{- range $i, $namespace := $namespaces }}
  lumigooperatorheartbeat/ns_{{ $namespace.name }}:
    namespace: {{ $namespace.name }}
{{- end }}

  k8sobjects/objects:
    auth_type: serviceAccount
    objects:
{{- $namespaceNames := coll.Slice }}
{{- range $i, $namespace := $namespaces }}
{{- $namespaceNames = $namespaceNames | append $namespace.name }}
{{- end }}
{{- range $i, $mode := (coll.Slice "watch" "pull") }}
    - name: pods
      mode: {{ $mode }}
      interval: 10m
      namespaces: [ {{ join $namespaceNames ", " }} ]
    - name: daemonsets
      group: apps
      mode: {{ $mode }}
      interval: 10m
      namespaces: [ {{ join $namespaceNames ", " }} ]
    - name: deployments
      group: apps
      mode: {{ $mode }}
      interval: 10m
      namespaces: [ {{ join $namespaceNames ", " }} ]
    - name: replicasets
      group: apps
      mode: {{ $mode }}
      interval: 10m
      namespaces: [ {{ join $namespaceNames ", " }} ]
    - name: statefulsets
      group: apps
      mode: {{ $mode }}
      interval: 10m
      namespaces: [ {{ join $namespaceNames ", " }} ]
    - name: cronjobs
      group: batch
      mode: {{ $mode }}
      interval: 10m
      namespaces: [ {{ join $namespaceNames ", " }} ]
    - name: jobs
      group: batch
      mode: {{ $mode }}
      interval: 10m
      namespaces: [ {{ join $namespaceNames ", " }} ]
{{- end }}

  k8sobjects/events:
    auth_type: serviceAccount
    objects:
{{- range $i, $mode := (coll.Slice "watch" "pull") }}
{{- range $j, $fieldSelector := (coll.Slice "involvedObject.apiVersion=v1,involvedObject.kind=Pod" "involvedObject.apiVersion=apps/v1,involvedObject.kind=DaemonSet" "involvedObject.apiVersion=apps/v1,involvedObject.kind=Deployment" "involvedObject.apiVersion=apps/v1,involvedObject.kind=ReplicaSet" "involvedObject.apiVersion=apps/v1,involvedObject.kind=StatefulSet" "involvedObject.apiVersion=batch/v1,involvedObject.kind=CronJob" "involvedObject.apiVersion=batch/v1,involvedObject.kind=Job" ) }}
    - name: events
      mode: {{ $mode }}
      interval: 10m
      namespaces: [ {{ join $namespaceNames ", " }} ]
      # Filter out events without the involved object's UID, e.g., the ones generated by our webhook
      field_selector: {{ $fieldSelector }},involvedObject.uid!='',involvedObject.uid!=
{{- end }}
{{- end }}

connectors:
  routing/k8s_objects:
    table:
{{- range $i, $namespace := $namespaces }}
      - context: log
        condition: resource["k8s.namespace.name"] == "{{ $namespace.name }}"
        pipelines: [logs/k8s_objects_ns_{{ $namespace.name }}]
{{- end }}

  routing/k8s_events:
    table:
{{- range $i, $namespace := $namespaces }}
      - context: log
        condition: resource["k8s.namespace.name"] == "{{ $namespace.name }}"
        pipelines: [logs/k8s_events_ns_{{ $namespace.name }}]
{{- end }}

extensions:

  health_check:

  headers_setter/lumigo:
    headers:
    # Use the same authorization header as the one accompanying
    # the request received in the receiver. It needs the
    # `include_metadata: true` parameter in the `otlp` exporter
    - key: authorization
      from_context: Authorization
      action: upsert

  lumigoauth/server:
    type: server

{{- range $i, $namespace := $namespaces }}
  lumigoauth/ns_{{ $namespace.name }}:
    type: client
    token: {{ $namespace.token }}
{{- end }}

exporters:

{{- if $watchdogEnabled }}
  otlphttp/lumigo_metrics:
    endpoint: {{ getenv "LUMIGO_METRICS_ENDPOINT" "https://ga-otlp.lumigo-tracer-edge.golumigo.com" }}
    headers:
      # We cannot use headers_setter/lumigo since it assumes the headers are already set by the sender, and in this case -
      # since we're scraping Prometheus metrics and not receiving any metrics from customer code - we don't have any incoming headers.
      Authorization: "LumigoToken {{ $infraMetricsToken }}"
{{- end }}

{{- range $i, $namespace := $namespaces }}
  otlphttp/lumigo_ns_{{ $namespace.name }}:
    endpoint: $LUMIGO_LOGS_ENDPOINT
    auth:
      authenticator: lumigoauth/ns_{{ $namespace.name }}
{{- end }}

{{- if $debug }}
  debug:
    verbosity: detailed
    sampling_initial: 1
    sampling_thereafter: 1
{{- end }}

processors:

  batch:

  k8sdataenricherprocessor:
    auth_type: serviceAccount

{{- range $i, $namespace := $namespaces }}
  transform/add_ns_attributes_ns_{{ $namespace.name }}:
    log_statements:
    - context: resource
      statements:
      - set(attributes["k8s.namespace.name"], "{{ $namespace.name }}")
      - set(attributes["k8s.namespace.uid"], "{{ $namespace.uid }}")
{{- end }}

  filter/only_monitored_namespaces:
    error_mode: ignore
    logs:
      include:
        match_type: regexp
        resource_attributes:
        # We add k8s.namespace.name in the 'transform/add_ns_attributes_ns_<$namespace.name>' processor
{{- $namespaceNames := coll.Slice }}
{{- range $i, $namespace := $namespaces }}
{{- $namespaceNames = $namespaceNames | append $namespace.name }}
{{- end }}
        - key: k8s.namespace.name
          value: "{{ join $namespaceNames "|" }}"
{{- if $clusterName }}
  transform/add_cluster_name:
    trace_statements:
    - context: resource
      statements:
      - set(attributes["k8s.cluster.name"], "{{ $clusterName }}")
    metric_statements:
    - context: resource
      statements:
      - set(attributes["k8s.cluster.name"], "{{ $clusterName }}")
    log_statements:
    - context: resource
      statements:
      - set(attributes["k8s.cluster.name"], "{{ $clusterName }}")
{{- end }}

  transform/add_heartbeat_attributes:
    log_statements:
    - context: scope
      statements:
      - set(name, "lumigo-operator.namespace_heartbeat")

  transform/set_k8s_objects_scope:
    log_statements:
    - context: scope
      statements:
      - set(name, "lumigo-operator.k8s-objects")
      - set(version, "{{ $config.operator.version }}")

  transform/set_k8s_events_scope:
    log_statements:
    - context: scope
      statements:
      - set(name, "lumigo-operator.k8s-events")
      - set(version, "{{ $config.operator.version }}")

{{- range $i, $namespace := $namespaces }}
  batch/k8s_objects_ns_{{ $namespace.name }}:
    send_batch_size: 100
    timeout: 1s
  batch/k8s_events_ns_{{ $namespace.name }}:
    send_batch_size: 100
    timeout: 1s
{{- end }}

  transform/inject_operator_details_into_resource:
    trace_statements:
    - context: resource
      statements:
      - set(attributes["lumigo.k8s_operator.version"], "{{ $config.operator.version }}")
      - set(attributes["lumigo.k8s_operator.deployment_method"], "{{ $config.operator.deployment_method }}")
    metric_statements:
    - context: resource
      statements:
      - set(attributes["lumigo.k8s_operator.version"], "{{ $config.operator.version }}")
      - set(attributes["lumigo.k8s_operator.deployment_method"], "{{ $config.operator.deployment_method }}")
    log_statements:
    - context: resource
      statements:
      - set(attributes["lumigo.k8s_operator.version"], "{{ $config.operator.version }}")
      - set(attributes["lumigo.k8s_operator.deployment_method"], "{{ $config.operator.deployment_method }}")

service:

  telemetry:
    logs:
      level: {{ $debug | ternary "debug" "info" }}
    metrics:
      level: detailed
      address: ":8888"

  extensions:
  - headers_setter/lumigo
  - health_check
  - lumigoauth/server
{{- range $i, $namespace := $namespaces }}
  - lumigoauth/ns_{{ $namespace.name }}
{{- end }}

  pipelines:
{{- if $watchdogEnabled }}
    metrics/watchdog:
      receivers:
      - prometheus/collector-self-metrics
      processors:
      - filter/filter-prom-metrics
      - batch
      - k8sdataenricherprocessor
      - transform/inject_operator_details_into_resource
{{- if $clusterName }}
      - transform/add_cluster_name
{{- end }}
      exporters:
      - otlphttp/lumigo_metrics
{{- if $debug }}
      - debug
{{- end }}
{{- end }}

{{- range $i, $namespace := $namespaces }}
    logs/usage_analytics_ns_{{ $namespace.name }}:
      receivers:
      - lumigooperatorheartbeat/ns_{{ $namespace.name }}
      processors:
      - k8sdataenricherprocessor
      - transform/add_heartbeat_attributes
      - transform/add_ns_attributes_ns_{{ $namespace.name }}
{{- if $clusterName }}
      - transform/add_cluster_name
{{- end }}
      - transform/inject_operator_details_into_resource
      exporters:
{{- if $config.debug }}
      - debug
{{- end }}
      - otlphttp/lumigo_ns_{{ $namespace.name }}

    logs/k8s_objects_ns_{{ $namespace.name }}:
      receivers:
      - routing/k8s_objects
      processors:
      - transform/set_k8s_objects_scope
      - k8sdataenricherprocessor
      - transform/add_ns_attributes_ns_{{ $namespace.name }}
      - filter/only_monitored_namespaces
{{- if $clusterName }}
      - transform/add_cluster_name
{{- end }}
      - transform/inject_operator_details_into_resource
      - batch/k8s_objects_ns_{{ $namespace.name }}
      exporters:
{{- if $debug }}
      - debug
{{- end }}
      - otlphttp/lumigo_ns_{{ $namespace.name }}

    logs/k8s_events_ns_{{ $namespace.name }}:
      receivers:
      - routing/k8s_events
      processors:
      - transform/set_k8s_events_scope
      - k8sdataenricherprocessor
      - transform/add_ns_attributes_ns_{{ $namespace.name }}
      - filter/only_monitored_namespaces
      - transform/inject_operator_details_into_resource
{{- if $clusterName }}
      - transform/add_cluster_name
{{- end }}
      - batch/k8s_events_ns_{{ $namespace.name }}
      exporters:
{{- if $debug }}
      - debug
{{- end }}
      - otlphttp/lumigo_ns_{{ $namespace.name }}
{{- end }}

    # cross-namespace pipeline that receives objects from all namespaces and routes them to the appropriate namespace pipeline
    logs/k8s_objects_unified:
      receivers:
      - k8sobjects/objects
      processors:
      - transform/set_k8s_objects_scope
      - k8sdataenricherprocessor
      - filter/only_monitored_namespaces
{{- if $clusterName }}
      - transform/add_cluster_name
{{- end }}
      - transform/inject_operator_details_into_resource
      exporters:
      - routing/k8s_objects

    # cross-namespace pipeline that receives events from all namespaces and routes them to the appropriate namespace pipeline
    logs/k8s_events_unified:
      receivers:
      - k8sobjects/events
      processors:
      - transform/set_k8s_events_scope
      - k8sdataenricherprocessor
      - filter/only_monitored_namespaces
      - transform/inject_operator_details_into_resource
{{- if $clusterName }}
      - transform/add_cluster_name
{{- end }}
      exporters:
      - routing/k8s_events
{{- end }}
