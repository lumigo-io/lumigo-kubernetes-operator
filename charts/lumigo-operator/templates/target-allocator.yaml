apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "helm.fullname" . }}-target-allocator
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "helm.fullname" . }}-target-allocator
rules:
  - apiGroups: [""]
    resources: ["nodes", "pods", "endpoints", "services"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "helm.fullname" . }}-target-allocator-binding
subjects:
  - kind: ServiceAccount
    name: {{ include "helm.fullname" . }}-target-allocator
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ include "helm.fullname" . }}-target-allocator
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "helm.fullname" . }}-target-allocator-config
  namespace: {{ .Release.Namespace }}
data:
  target-allocator-config.yaml: |
    allocation_strategy: consistent-hashing
    collector_selector:
      matchlabels:
        lumigo.metrics-scraper: 'true'
    config:
      global:
        scrape_interval: {{ .Values.clusterCollection.metrics.frequency }}
      scrape_configs:
        - job_name: 'k8s-infra-metrics'
          metrics_path: /metrics
          scrape_interval: {{ .Values.clusterCollection.metrics.frequency }}
          scheme: https
          tls_config:
            insecure_skip_verify: true
          kubernetes_sd_configs:
            - role: node
          authorization:
            credentials_file: "/var/run/secrets/kubernetes.io/serviceaccount/token"
        - job_name: 'k8s-infra-metrics-cadvisor'
          metrics_path: /metrics/cadvisor
          scrape_interval: {{ .Values.clusterCollection.metrics.frequency }}
          scheme: https
          tls_config:
            insecure_skip_verify: true
          kubernetes_sd_configs:
            - role: node
          authorization:
            credentials_file: "/var/run/secrets/kubernetes.io/serviceaccount/token"
        - job_name: 'k8s-infra-metrics-resources'
          metrics_path: /metrics/resource
          scrape_interval: {{ .Values.clusterCollection.metrics.frequency }}
          scheme: https
          tls_config:
            insecure_skip_verify: true
          kubernetes_sd_configs:
            - role: node
          authorization:
            credentials_file: "/var/run/secrets/kubernetes.io/serviceaccount/token"
        - job_name: 'prometheus-node-exporter'
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - source_labels: [__meta_kubernetes_node_address_InternalIP]
              action: replace
              target_label: __address__
              # Scrape a custom port
              replacement: '$1:{{ .Values.prometheusNodeExporter.service.nodePort }}'
            - source_labels: [__meta_kubernetes_node_name]
              action: replace
              target_label: node
          metrics_path: "/metrics"
          authorization:
            credentials_file: "/var/run/secrets/kubernetes.io/serviceaccount/token"
        - job_name: 'kube-state-metrics'
          metrics_path: /metrics
          scrape_interval: {{ .Values.clusterCollection.metrics.frequency }}
          static_configs:
            - targets: ['{{ .Release.Name }}-kube-state-metrics.{{ .Release.Namespace }}.svc.cluster.local:{{ index .Values "kube-state-metrics" "service" "port" }}']
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "helm.fullname" . }}-target-allocator
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "helm.fullname" . }}-target-allocator
  template:
    metadata:
      labels:
        app: {{ include "helm.fullname" . }}-target-allocator
    spec:
      serviceAccountName: {{ include "helm.fullname" . }}-target-allocator
      containers:
        - name: target-allocator
          image: "{{ .Values.targetAllocator.image.repository }}:{{ .Values.targetAllocator.image.tag }}"
          env:
            - name: OTELCOL_NAMESPACE
              value: "{{ .Release.Namespace }}"
          args:
            - "--config-file=/conf/target-allocator-config.yaml"
{{- if .Values.debug.enabled }}
            - "--zap-log-level=debug"
{{- end }}
          ports:
            - containerPort: 80
          volumeMounts:
            - name: config
              mountPath: /conf
      volumes:
        - name: config
          configMap:
            name: {{ include "helm.fullname" . }}-target-allocator-config
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "helm.fullname" . }}-target-allocator
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: {{ include "helm.fullname" . }}-target-allocator
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080