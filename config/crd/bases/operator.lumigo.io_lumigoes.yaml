---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: lumigoes.operator.lumigo.io
spec:
  group: operator.lumigo.io
  names:
    kind: Lumigo
    listKind: LumigoList
    plural: lumigoes
    singular: lumigo
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Lumigo is the Schema for the lumigoes API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: LumigoSpec defines the desired state of Lumigo
            properties:
              infrastructure:
                properties:
                  enabled:
                    description: Whether Kubernetes infrastructrure collection should
                      be active. If unspecified, defaults to `true`
                    type: boolean
                  kubeEvents:
                    description: How to collect Kubernetes events and send them to
                      Lumigo.
                    properties:
                      enabled:
                        description: Whether Kubernetes events should be collected
                          and sent to Lumigo. If unspecified, defaults to `true`
                        type: boolean
                    type: object
                type: object
              lumigoToken:
                description: 'The Lumigo token to be used to authenticate against
                  Lumigo. For info on how to retrieve your Lumigo token, refer to:
                  https://docs.lumigo.io/docs/lumigo-tokens'
                properties:
                  secretRef:
                    description: Reference to a Kubernetes secret that contains the
                      credentials for Lumigo. The secret must be in the same namespace
                      as the LumigoSpec referencing it.
                    properties:
                      key:
                        description: Key of the Kubernetes secret that contains the
                          credential data.
                        type: string
                      name:
                        description: Name of a Kubernetes secret.
                        type: string
                    required:
                    - name
                    type: object
                type: object
              tracing:
                description: 'TracingSpec specified how distributed tracing (for example:
                  tracer injection) should be set up by the operator'
                properties:
                  injection:
                    properties:
                      enabled:
                        description: Whether Daemonsets, Deployments, ReplicaSets,
                          StatefulSets, CronJobs and Jobs that are created or updated
                          after the creation of the Lumigo resource be injected. If
                          unspecified, defaults to `true`
                        type: boolean
                      injectLumigoIntoExistingResourcesOnCreation:
                        description: Whether Daemonsets, Deployments, ReplicaSets,
                          StatefulSets, CronJobs and Jobs that already exist when
                          the Lumigo resource is created, will be updated with injection.
                          If unspecified, defaults to `true`. It requires `Enabled`
                          to be set to `true`.
                        type: boolean
                      removeLumigoFromResourcesOnDeletion:
                        description: Whether Daemonsets, Deployments, ReplicaSets,
                          StatefulSets, CronJobs and Jobs that are injected with Lumigo
                          will be updated to remove the injection when the Lumigo
                          resource is deleted. If unspecified, defaults to `true`.
                          It requires `Enabled` to be set to `true`.
                        type: boolean
                    type: object
                required:
                - injection
                type: object
            type: object
          status:
            description: LumigoStatus defines the observed state of Lumigo
            properties:
              conditions:
                description: The status of single Lumigo resources
                items:
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    lastUpdateTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  required:
                  - lastTransitionTime
                  - lastUpdateTime
                  - message
                  - status
                  - type
                  type: object
                type: array
              instrumentedResources:
                description: List of resources instrumented by this Lumigo instance
                items:
                  description: "ObjectReference contains enough information to let
                    you inspect or modify the referred object. --- New uses of this
                    type are discouraged because of difficulty describing its usage
                    when embedded in APIs. 1. Ignored fields.  It includes many fields
                    which are not generally honored.  For instance, ResourceVersion
                    and FieldPath are both very rarely valid in actual usage. 2. Invalid
                    usage help.  It is impossible to add specific help for individual
                    usage.  In most embedded usages, there are particular restrictions
                    like, \"must refer only to types A and B\" or \"UID not honored\"
                    or \"name must be restricted\". Those cannot be well described
                    when embedded. 3. Inconsistent validation.  Because the usages
                    are different, the validation rules are different by usage, which
                    makes it hard for users to predict what will happen. 4. The fields
                    are both imprecise and overly precise.  Kind is not a precise
                    mapping to a URL. This can produce ambiguity during interpretation
                    and require a REST mapping.  In most cases, the dependency is
                    on the group,resource tuple and the version of the actual struct
                    is irrelevant. 5. We cannot easily change it.  Because this type
                    is embedded in many locations, updates to this type will affect
                    numerous schemas.  Don't make new APIs embed an underspecified
                    API type they do not control. \n Instead of using this type, create
                    a locally provided and used type that is well-focused on your
                    reference. For example, ServiceReferences for admission registration:
                    https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                    ."
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of
                        an entire object, this string should contain a valid JSON/Go
                        field access statement, such as desiredState.manifest.containers[2].
                        For example, if the object reference is to a container within
                        a pod, this would take on a value like: "spec.containers{name}"
                        (where "name" refers to the name of the container that triggered
                        the event) or if no container name is specified "spec.containers[2]"
                        (container with index 2 in this pod). This syntax is chosen
                        only to have some well-defined way of referencing a part of
                        an object. TODO: this design is not final and this field is
                        subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference
                        is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
                type: array
            required:
            - conditions
            - instrumentedResources
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
